package pl.pojo.sample.infrastructure.configuration;import com.netflix.zuul.ZuulFilter;import com.netflix.zuul.context.RequestContext;import org.springframework.cloud.netflix.zuul.filters.support.FilterConstants;import org.springframework.stereotype.Component;import javax.servlet.http.HttpServletRequest;import java.net.MalformedURLException;import java.net.URL;@Componentpublic class SomeFilter extends ZuulFilter {    public SomeFilter() {    }    @Override    public String filterType() {        return FilterConstants.PRE_TYPE;    }    @Override    public int filterOrder() {        return FilterConstants.SIMPLE_HOST_ROUTING_FILTER_ORDER;    }    @Override    public boolean shouldFilter() {        return RequestContext.getCurrentContext()                             .getRouteHost() != null                && RequestContext.getCurrentContext()                                 .sendZuulResponse();    }    @Override    public Object run() {        RequestContext context = RequestContext.getCurrentContext();        try {            final URL url = getUrl(context.getRequest());            context.setRouteHost(url);        } catch (MalformedURLException e) {            throw new IllegalArgumentException("Couldn't get service URL!", e);        }        return null;    }    private URL getUrl(HttpServletRequest request) throws MalformedURLException {        // this is mock implementation        if (request.getHeader("someHeader")                   .contains("someValue")) {            return new URL("http://localhost:8080");        } else {            return new URL("http://localhost:8081");        }    }}